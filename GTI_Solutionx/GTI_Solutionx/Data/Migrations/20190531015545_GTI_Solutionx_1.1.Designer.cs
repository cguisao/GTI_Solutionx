// <auto-generated />
using System;
using GTI_Solutionx.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GTI_Solutionx.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190531015545_GTI_Solutionx_1.1")]
    partial class GTI_Solutionx_11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GTI_Solutionx.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.Amazon", b =>
                {
                    b.Property<int>("id");

                    b.Property<string>("Asin");

                    b.Property<bool>("blackList");

                    b.Property<string>("marketPlace");

                    b.Property<double>("price");

                    b.Property<string>("sku");

                    b.Property<string>("wholesaler");

                    b.HasKey("id");

                    b.ToTable("Amazon");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.FragrancexTitles", b =>
                {
                    b.Property<int>("ItemID");

                    b.Property<string>("Title");

                    b.HasKey("ItemID");

                    b.ToTable("FragrancexTitle");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.PerfumeWorldWide", b =>
                {
                    b.Property<int>("ItemID");

                    b.Property<string>("Brand");

                    b.Property<double>("Cost");

                    b.Property<string>("Description");

                    b.Property<string>("Designer");

                    b.Property<string>("Gender");

                    b.Property<string>("Image");

                    b.Property<double?>("MSRP");

                    b.Property<string>("Set");

                    b.Property<string>("Size");

                    b.Property<string>("Type");

                    b.Property<double?>("Weight");

                    b.Property<bool>("isInstock");

                    b.Property<string>("sku");

                    b.Property<long?>("upc");

                    b.HasKey("ItemID");

                    b.ToTable("PerfumeWorldWide");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.Profile", b =>
                {
                    b.Property<string>("ProfileUser");

                    b.Property<string>("LongstartTitle");

                    b.Property<string>("MidtartTitle");

                    b.Property<string>("ShortstartTitle");

                    b.Property<string>("endTtile");

                    b.Property<double>("fee");

                    b.Property<byte[]>("formFile");

                    b.Property<string>("html");

                    b.Property<int>("items");

                    b.Property<double>("markdown");

                    b.Property<int>("max");

                    b.Property<int>("min");

                    b.Property<double>("profit");

                    b.Property<double>("promoting");

                    b.Property<double>("shipping");

                    b.Property<string>("sizeDivider");

                    b.HasKey("ProfileUser");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.ServiceTimeStamp", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Wholesalers");

                    b.Property<string>("type");

                    b.HasKey("id");

                    b.ToTable("ServiceTimeStamp");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.Shipping", b =>
                {
                    b.Property<int>("weightId");

                    b.Property<double>("ItemPrice");

                    b.HasKey("weightId");

                    b.ToTable("Shipping");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.ShopifyUser", b =>
                {
                    b.Property<int>("ItemID");

                    b.Property<string>("collection");

                    b.Property<string>("handle");

                    b.Property<string>("image");

                    b.Property<string>("option1Value");

                    b.Property<string>("sku");

                    b.Property<string>("tags");

                    b.Property<string>("title");

                    b.Property<string>("type");

                    b.Property<string>("vendor");

                    b.HasKey("ItemID");

                    b.ToTable("ShopifyUser");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.UPC", b =>
                {
                    b.Property<int>("ItemID");

                    b.Property<long?>("Upc");

                    b.HasKey("ItemID");

                    b.ToTable("UPC");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.UsersList", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sku");

                    b.Property<string>("userID");

                    b.HasKey("ItemID");

                    b.ToTable("UsersList");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.UsersListTemp", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sku");

                    b.Property<string>("userID");

                    b.HasKey("ItemID");

                    b.ToTable("UsersListTemp");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.Wholesaler_AzImporter", b =>
                {
                    b.Property<int>("id");

                    b.Property<string>("Category");

                    b.Property<string>("HTMLDescription");

                    b.Property<string>("Image1");

                    b.Property<string>("Image2");

                    b.Property<string>("Image3");

                    b.Property<string>("Image4");

                    b.Property<string>("Image5");

                    b.Property<string>("Image6");

                    b.Property<string>("Image7");

                    b.Property<string>("Image8");

                    b.Property<string>("ItemName");

                    b.Property<string>("MainImage");

                    b.Property<int>("Quantity");

                    b.Property<string>("ShortDescription");

                    b.Property<string>("Sku");

                    b.Property<int>("Weight");

                    b.Property<double>("WholeSale");

                    b.HasKey("id");

                    b.ToTable("Wholesaler_AzImporter");
                });

            modelBuilder.Entity("GTI_Solutionx.Models.Dashboard.Wholesaler_Fragrancex", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName");

                    b.Property<string>("Description");

                    b.Property<string>("Gender");

                    b.Property<bool>("Instock");

                    b.Property<string>("LargeImageUrl");

                    b.Property<string>("MetricSize");

                    b.Property<string>("ParentCode");

                    b.Property<string>("ProductName");

                    b.Property<double>("RetailPriceUSD");

                    b.Property<string>("Size");

                    b.Property<int>("Sku");

                    b.Property<string>("SmallImageURL");

                    b.Property<string>("Type");

                    b.Property<long?>("Upc");

                    b.Property<double>("WholePriceAUD");

                    b.Property<double>("WholePriceCAD");

                    b.Property<double>("WholePriceEUR");

                    b.Property<double>("WholePriceGBP");

                    b.Property<double>("WholePriceUSD");

                    b.Property<bool>("isInstock");

                    b.HasKey("id");

                    b.ToTable("Wholesaler_Fragrancex");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GTI_Solutionx.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GTI_Solutionx.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GTI_Solutionx.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GTI_Solutionx.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
